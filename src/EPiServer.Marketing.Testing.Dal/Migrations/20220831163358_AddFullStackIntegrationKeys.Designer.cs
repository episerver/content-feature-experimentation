// <auto-generated />
using System;
using EPiServer.Marketing.Testing.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EPiServer.Marketing.Testing.Dal.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220831163358_AddFullStackIntegrationKeys")]
    partial class AddFullStackIntegrationKeys
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EPiServer.Marketing.Testing.Dal.EntityModel.DalABTest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActualVisitorCount")
                        .HasColumnType("int");

                    b.Property<double>("ConfidenceLevel")
                        .HasColumnType("float");

                    b.Property<string>("ContentLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExpectedVisitorCount")
                        .HasColumnType("int");

                    b.Property<string>("FS_ExperimentKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FS_FlagKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSignificant")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OriginalItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParticipationPercentage")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ZScore")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("tblABTest", (string)null);
                });

            modelBuilder.Entity("EPiServer.Marketing.Testing.Dal.EntityModel.DalKeyConversionResult", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Conversions")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KpiId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Performance")
                        .HasColumnType("int");

                    b.Property<string>("SelectedWeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VariantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("tblABKeyConversionResult", (string)null);
                });

            modelBuilder.Entity("EPiServer.Marketing.Testing.Dal.EntityModel.DalKeyFinancialResult", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ConvertedTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConvertedTotalCulture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KpiId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TotalMarketCulture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VariantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("tblABKeyFinancialResult", (string)null);
                });

            modelBuilder.Entity("EPiServer.Marketing.Testing.Dal.EntityModel.DalKeyPerformanceIndicator", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KeyPerformanceIndicatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("tblABKeyPerformanceIndicator", (string)null);
                });

            modelBuilder.Entity("EPiServer.Marketing.Testing.Dal.EntityModel.DalKeyValueResult", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("KpiId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<Guid?>("VariantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("tblABKeyValueResult", (string)null);
                });

            modelBuilder.Entity("EPiServer.Marketing.Testing.Dal.EntityModel.DalVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Conversions")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWinner")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ItemVersion")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("tblABVariant", (string)null);
                });

            modelBuilder.Entity("EPiServer.Marketing.Testing.Dal.EntityModel.DalKeyConversionResult", b =>
                {
                    b.HasOne("EPiServer.Marketing.Testing.Dal.EntityModel.DalVariant", "DalVariant")
                        .WithMany("DalKeyConversionResults")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DalVariant");
                });

            modelBuilder.Entity("EPiServer.Marketing.Testing.Dal.EntityModel.DalKeyFinancialResult", b =>
                {
                    b.HasOne("EPiServer.Marketing.Testing.Dal.EntityModel.DalVariant", "DalVariant")
                        .WithMany("DalKeyFinancialResults")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DalVariant");
                });

            modelBuilder.Entity("EPiServer.Marketing.Testing.Dal.EntityModel.DalKeyPerformanceIndicator", b =>
                {
                    b.HasOne("EPiServer.Marketing.Testing.Dal.EntityModel.DalABTest", "DalABTest")
                        .WithMany("KeyPerformanceIndicators")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DalABTest");
                });

            modelBuilder.Entity("EPiServer.Marketing.Testing.Dal.EntityModel.DalKeyValueResult", b =>
                {
                    b.HasOne("EPiServer.Marketing.Testing.Dal.EntityModel.DalVariant", "DalVariant")
                        .WithMany("DalKeyValueResults")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DalVariant");
                });

            modelBuilder.Entity("EPiServer.Marketing.Testing.Dal.EntityModel.DalVariant", b =>
                {
                    b.HasOne("EPiServer.Marketing.Testing.Dal.EntityModel.DalABTest", "DalABTest")
                        .WithMany("Variants")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DalABTest");
                });

            modelBuilder.Entity("EPiServer.Marketing.Testing.Dal.EntityModel.DalABTest", b =>
                {
                    b.Navigation("KeyPerformanceIndicators");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("EPiServer.Marketing.Testing.Dal.EntityModel.DalVariant", b =>
                {
                    b.Navigation("DalKeyConversionResults");

                    b.Navigation("DalKeyFinancialResults");

                    b.Navigation("DalKeyValueResults");
                });
#pragma warning restore 612, 618
        }
    }
}
