@model EPiServer.Reference.Commerce.Site.Features.Product.ViewModels.FashionPackageViewModel

<div class="modal-content jsProductDetails">

    <div class="modal-header">
        <p>
            <button type="button" class="close" data-dismiss="modal">&times;</button>
        </p>
    </div>

    <div class="modal-body row ">

        <div class="col-xs-12 col-sm-4 col--leading">
            <div id="product-carousel" class="carousel slide" data-ride="carousel">
                <div class="carousel-inner" role="listbox">
                    <div class="item active" data-slide-number="0">
                        <img src="@Model.Images.ElementAt(0)" alt="@Model.Package.Code" />
                    </div>
                </div>
            </div>
        </div>

        <div class="col-xs-12 col-sm-8 product-info">
            <div class="row">
                <div class="col-xs-12">
                    <h1>@Html.PropertyFor(x => x.Package.DisplayName)</h1>
                </div>
                <div class="col-xs-12">
                    @Html.PropertyFor(x => x.Package.Description)
                </div>
                <div class="col-xs-12 col-sm-6">
                    @if (Model.DiscountedPrice < Model.ListingPrice)
                    {
                        <h4 class="product-price">@{RenderMoney(Model.ListingPrice);}</h4>
                        <h4 class="product-price--discount">@{RenderMoney(Model.DiscountedPrice.GetValueOrDefault());}</h4>
                    }
                    else
                    {
                        <h4 class="product-price">@{RenderMoney(Model.DiscountedPrice.GetValueOrDefault());}</h4>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-md-7">
                    @if (Model.IsAvailable)
                    {
                        using (Html.BeginForm("AddToCart", "Cart", FormMethod.Post, new { @class = "form-inline", data_container = "MiniCart" }))
                        {
                            @Html.Hidden("code", Model.Package.Code)
                            <button type="submit" role="button" class="btn btn-primary jsAddToCart" data-container="MiniCart"><span class="glyphicon glyphicon-shopping-cart"></span> @Html.Translate("/Product/Button/AddToCart")</button>
                        }
                        if (User.Identity.IsAuthenticated && !(bool)ViewData["IsReadOnly"])
                        {
                            using (Html.BeginForm("AddToCart", "WishList", FormMethod.Post, new { @class = "form-inline jsAddToWishList", data_container = "WishListMiniCart" }))
                            {
                                @Html.Hidden("code", Model.Package.Code)
                                <button type="submit" role="button" class="btn btn-default btn--blue jsAddToCart" data-container="WishListMiniCart"><span class="glyphicon glyphicon-heart"></span> @Html.Translate("/Product/Button/AddToWishList")</button>
                            }
                        }

                        if (ShouldRenderTrackingSection())
                        {
                            <script>
                                $(document).ready(function () {
                                    var refCode = '@Model.Package.Code';
                                    var productName = '@Model.Package.Name';
                                    var productTrackingData = TrackingDataFactory.createProductTrackingData(refCode, productName);

                                    var recommendationId = parseInt(isNaN('@this.Context.Request.Query["recommendationId"]') ? '0' : '@this.Context.Request.Query["recommendationId"]');
                                    if (recommendationId > 0) {
                                        productTrackingData["recommendationId"] = recommendationId;
                                    }

                                    productTrackingData["SkipRecommendations"] = true;
                                    productTrackingData["customAttributes"] = { 'marketId': Market.getSelectedMarketId() };

                                    epiRecommendations.track(productTrackingData);
                                });
                            </script>
                        }
                    }
                </div>
                <div id="CartWarningMessage" class="col-md-5 col-xs-12 alert alert-danger pull-right" hidden>
                    <button type="button" class="close" data-hide="alert">&times;</button>
                    <span class="warning-message"></span>
                </div>
            </div>
        </div>
    </div>
</div>

@inject PersonalizationClientConfiguration _personalizationClientConfiguration
@inject IContextModeResolver _contextModeResolver

@functions
{
    public bool ShouldRenderTrackingSection()
    {
        return _personalizationClientConfiguration.TrackingEnabled && _contextModeResolver.CurrentMode != ContextMode.Edit;
    }

    void RenderMoney(Money money)
    {
        <span>
            @Html.Raw(money.ToString().Replace(money.Currency.Format.CurrencySymbol, @"<span class=""product-price__currency-marker"">" + money.Currency.Format.CurrencySymbol + "</span>"))
        </span>
    }
}