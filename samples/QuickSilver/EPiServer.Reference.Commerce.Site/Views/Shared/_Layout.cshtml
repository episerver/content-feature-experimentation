@using EPiServer.Personalization.Commerce.Extensions
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width initial-scale=1.0">
    <title> @await Component.InvokeAsync("Head") </title>

    <link rel="stylesheet" href="~/css/css.min.css" />
    <script src="~/js/script.min.js"></script>

    @RenderSection("Meta", false)
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"> </script>
        <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"> </script>
    <![endif]-->
    <link rel="icon" href="~/Styles/Images/favicon.ico" type="image/x-icon">
    @{
        var requestLang = this.Context.GetRequestedLanguage();
        if (!string.IsNullOrEmpty(requestLang))
        {
            //ChangeThis - Using language annotations. You should update defaultLanguage below according your site.
            //Refer to: https://support.google.com/webmasters/answer/189077?hl=en for detail guide.
            var defaultLanguage = "en";
            var requestContentLink = this.Context.GetContentLink();
            RenderHrefLangs(requestContentLink, defaultLanguage);
        }
    }
    @Html.RequiredClientResources("Header")
    @Html.LoadTrackingAPI()
</head>
<body>
    @await Html.RenderEPiServerQuickNavigatorAsync()
    @{
        var editRole = "WebEditors";
        var hasEditAccess = Html.ViewContext?.HttpContext?.User?.IsInRole(editRole) ?? false;
        if (!PageIsInEditMode() && hasEditAccess)
        {
            // Add element to make room for quick navigator.
            <div class="container-fluid"><div class="container"><p>&nbsp;</p></div></div>
        }
    }
    @Html.RenderReadonlyMessage()
    <div id="ModalDialog" class="modal fade" role="dialog"><div class="modal-dialog modal-lg"></div></div>
    <div class="cookies jsCookies" style="display: none">
        @Html.Translate("/Header/Cookie/CookieUse") <button type="button" class="btn btn-xs btn-primary jsCookiesBtn" href="#">@Html.Translate("/Header/Cookie/Ok")</button>
    </div>
    @await Component.InvokeAsync("Navigation")
    <div class="quicksilver site-wrapper">
        <div class="main-area">@RenderBody()</div>
        <div class="recommendations recommendations-upper">@RenderSection("UpperRecommendations", false)</div>
        <div class="recommendations recommendations-left">@RenderSection("LeftMarginRecommendations", false)</div>
        <div class="recommendations recommendations-right">@RenderSection("RightMarginRecommendations", false)</div>
        <div class="recommendations recommendations-bottom">@RenderSection("BottomRecommendations", false)</div>
    </div>
    @await Component.InvokeAsync("Footer")

    @Html.RequiredClientResources("Footer")

    @if (ShouldRenderTrackingSection())
    {
        @Html.Partial("_RecommendationsTemplates")
        @RenderSection("Tracking", false)
    }

</body>
</html>

@inject PersonalizationClientConfiguration _personalizationClientConfiguration
@inject IContextModeResolver _contextModeResolver

@functions
{
    private static HtmlString CreateAlternateLinkWithHrefLang(string pageUrl, string lang)
    {
        var tagBuilder = new TagBuilder("link");
        tagBuilder.MergeAttribute("rel", "alternate");
        tagBuilder.MergeAttribute("href", pageUrl);
        tagBuilder.MergeAttribute("hreflang", lang);
        return new HtmlString(tagBuilder.RenderSelfClosingTag() + Environment.NewLine);
    }

    private string GetAbsoluteUrl(ContentReference requestContentLink, string language)
    {

        return this.Context.Request.Host +
            UrlResolver.Current.GetUrl(this.Context.Request, requestContentLink, language);
    }

    private static IEnumerable<string> GetAllSiteAvailableLanguages()
    {
        var marketService = ServiceLocator.Current.GetInstance<IMarketService>();
        var allMarkets = marketService.GetAllMarkets().Where(x => x.IsEnabled).ToList();
        var languages = allMarkets.SelectMany(x => x.Languages).Distinct();
        return languages.Select(l => l.Name);
    }

    private static string Serialize(object obj)
    {
        return JsonConvert.SerializeObject(obj, SerializerSettings);
    }

    private static readonly JsonSerializerSettings SerializerSettings = new JsonSerializerSettings
    {
        ContractResolver = new CamelCasePropertyNamesContractResolver()
    };

    void RenderHrefLangs(ContentReference requestContentLink, string defaultLanguage)
    {
        var languages = GetAllSiteAvailableLanguages();
        if (languages.Count() <= 1)
        {
            return;
        }
        foreach (var lang in languages)
        {
            Html.Raw(CreateAlternateLinkWithHrefLang(GetAbsoluteUrl(requestContentLink, lang), lang));
        }
        Html.Raw(CreateAlternateLinkWithHrefLang(GetAbsoluteUrl(requestContentLink, defaultLanguage), "x-default"));
    }

    public bool ShouldRenderTrackingSection()
    {
        return _personalizationClientConfiguration.TrackingEnabled &&
            _contextModeResolver.CurrentMode != ContextMode.Edit;

    }

    public bool PageIsInEditMode()
    {
        return _contextModeResolver.CurrentMode == ContextMode.Edit;
    }
}

