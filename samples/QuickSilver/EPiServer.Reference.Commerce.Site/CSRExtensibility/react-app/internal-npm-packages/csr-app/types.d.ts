// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../react
//   ../store/setting/state
//   ../react-router-dom

import * as React from 'react';
import { AppSettingState } from 'store/setting/state';
import { RouteComponentProps } from 'react-router-dom';

export { CSRApp, AppSettingState };

import '@episerver/ui-framework/dist/main.css';
import '../styles/app.scss';
interface Props {
    setting?: AppSettingState;
}
export declare class CSRApp extends React.Component<Props> {
    state: {
        ready: boolean;
    };
    componentDidMount(): Promise<void>;
    render(): false | JSX.Element;
}
export {};

export declare class AppSettingState extends CSRAppSetting {
}

export declare class CSRAppSetting {
        pageConfig: AppPagesConfig;
        general?: {
                searchLineItemResult: ExtendableUI<SearchLineItemResult>;
                editShipmentDialog?: ExtendableUI<EditShipmentDialogConfig>;
                addLineItemDialog?: ExtendableUI<AddLineItemDialogConfig>;
                editLineItemDialog?: ExtendableUI<EditLineItemDialogConfig>;
        };
}
export interface AppPagesConfig {
        /**
            * Config page at route '/orders'
            */
        orderList?: ExtendableUI<OrderListConfig>;
        /**
            * Config page at route '/carts'
            */
        cartList?: ExtendableUI<CartListConfig>;
        /**
            * Config page at route '/paymentplans'
            */
        paymentPlanList?: ExtendableUI<PaymentPlanListConfig>;
        /**
            * Config page at route '/createorder'
            */
        createOrder?: ExtendableUI<CreateOrderConfig<CreateOrderExtendProps>, CreateOrderExtendProps>;
        /**
            * Config page at route '/orders/:id'
            */
        orderDetail?: ExtendableUI<OrderDetailConfig<OrderDetailExtendProps>, OrderDetailExtendProps>;
        /**
            * Config page at route '/customers/:contactId'
            */
        contactDetail?: ExtendableUI<ContactDetailConfig<ContactDetailExtendProps>>;
        /**
            * Config page at route '/carts/:id'
            */
        cartDetail?: ExtendableUI<CartDetailConfig<CartDetailExtendProps>, CartDetailExtendProps>;
        /**
            * Config page at route '/paymentplans/:id'
            */
        paymentPlanDetail?: ExtendableUI<PaymentPlanDetailConfig<PaymentPlanDetailExtendProps>, PaymentPlanDetailExtendProps>;
        /**
            * Config page at route '/createPaymentPlan'
            */
        createPaymentPlan?: ExtendableUI<CreatePaymentPlanConfig<CreatePaymentPlanExtendProps>, CreatePaymentPlanExtendProps>;
        /**
            * Define more routes
            */
        extraPages?: Array<ExtraPageConfig>;
}
export interface ExtendableUI<T, D = any> {
        extendUI?: ExtendableComponentProps<D>;
        config?: T;
}
export interface ExtendableUI<T, D> {
        extendUI?: ExtendableComponentProps<D>;
        config?: T;
}
export interface OrderListConfig {
}
export interface CreateOrderConfig<D> {
        extraTabs?: Array<OrderDetailTab<D>>;
}
export interface OrderDetailConfig<D> {
        /**
            * Add more tabs for OrderDetail page
            */
        extraTabs?: Array<OrderDetailTab<D>>;
}
export interface OrderDetailTab<D> {
        title: string;
        render: React.FunctionComponent<D>;
}
export interface ContactDetailConfig<D> {
        extraPages: Array<CustomContactDetailPage<D>>;
}
export interface CustomContactDetailPage<D> {
        title: string;
        path: string;
        exact?: boolean;
        render: React.FunctionComponent<D>;
        getLink(props: D): string;
}
export interface CartListConfig {
}
export interface CartDetailConfig<D> {
        extraTabs?: Array<OrderDetailTab<D>>;
}
export interface PaymentPlanListConfig {
}
export interface CreatePaymentPlanConfig<D> {
        extraTabs?: Array<OrderDetailTab<D>>;
}
export interface PaymentPlanDetailConfig<D> {
        extraTabs?: Array<OrderDetailTab<D>>;
}
export interface EditShipmentDialogConfig {
}
export interface EditLineItemDialogConfig {
}
export interface AddLineItemDialogConfig {
}
export interface ExtraPageConfig {
        path: string;
        exact?: boolean;
        render(props: RouteComponentProps): JSX.Element;
}
export interface SearchLineItemResult {
}
export interface OrderDetailExtendProps {
        /**
            * Id of Order
            */
        Id: number;
}
export interface CartDetailExtendProps {
        /**
            * Id of Cart
            */
        Id: number;
}
export interface PaymentPlanDetailExtendProps {
        /**
            * Id of PaymentPlan
            */
        Id: number;
}
export interface ContactDetailExtendProps {
        CustomerId: string;
}
export interface CreateOrderExtendProps {
        MarketId: string;
        CustomerId: string;
}
export interface CreatePaymentPlanExtendProps {
        MarketId: string;
        CustomerId: string;
}

export interface ExtendableComponentProps<D = any> {
        /**
            * Placeholder at the top of component
            */
        topPlaceHolder?: React.FunctionComponent<D>;
        /**
            * Placeholder at the bottom of component
            */
        bottomPlaceHolder?: React.FunctionComponent<D>;
}
export interface ExtendableUIProps {
        extendUI?: ExtendableComponentProps<any>;
}
export declare const withExtendableUI: <P extends object>(Component: React.ComponentType<P>) => {
        new (props: Readonly<P & ExtendableComponentProps<any>>): {
                render(): JSX.Element;
                context: any;
                setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<P & ExtendableComponentProps<any>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
                forceUpdate(callback?: (() => void) | undefined): void;
                readonly props: Readonly<P & ExtendableComponentProps<any>> & Readonly<{
                        children?: React.ReactNode;
                }>;
                state: Readonly<{}>;
                refs: {
                        [key: string]: React.ReactInstance;
                };
                componentDidMount?(): void;
                shouldComponentUpdate?(nextProps: Readonly<P & ExtendableComponentProps<any>>, nextState: Readonly<{}>, nextContext: any): boolean;
                componentWillUnmount?(): void;
                componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
                getSnapshotBeforeUpdate?(prevProps: Readonly<P & ExtendableComponentProps<any>>, prevState: Readonly<{}>): any;
                componentDidUpdate?(prevProps: Readonly<P & ExtendableComponentProps<any>>, prevState: Readonly<{}>, snapshot?: any): void;
                componentWillMount?(): void;
                UNSAFE_componentWillMount?(): void;
                componentWillReceiveProps?(nextProps: Readonly<P & ExtendableComponentProps<any>>, nextContext: any): void;
                UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P & ExtendableComponentProps<any>>, nextContext: any): void;
                componentWillUpdate?(nextProps: Readonly<P & ExtendableComponentProps<any>>, nextState: Readonly<{}>, nextContext: any): void;
                UNSAFE_componentWillUpdate?(nextProps: Readonly<P & ExtendableComponentProps<any>>, nextState: Readonly<{}>, nextContext: any): void;
        };
        new (props: P & ExtendableComponentProps<any>, context?: any): {
                render(): JSX.Element;
                context: any;
                setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<P & ExtendableComponentProps<any>>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
                forceUpdate(callback?: (() => void) | undefined): void;
                readonly props: Readonly<P & ExtendableComponentProps<any>> & Readonly<{
                        children?: React.ReactNode;
                }>;
                state: Readonly<{}>;
                refs: {
                        [key: string]: React.ReactInstance;
                };
                componentDidMount?(): void;
                shouldComponentUpdate?(nextProps: Readonly<P & ExtendableComponentProps<any>>, nextState: Readonly<{}>, nextContext: any): boolean;
                componentWillUnmount?(): void;
                componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
                getSnapshotBeforeUpdate?(prevProps: Readonly<P & ExtendableComponentProps<any>>, prevState: Readonly<{}>): any;
                componentDidUpdate?(prevProps: Readonly<P & ExtendableComponentProps<any>>, prevState: Readonly<{}>, snapshot?: any): void;
                componentWillMount?(): void;
                UNSAFE_componentWillMount?(): void;
                componentWillReceiveProps?(nextProps: Readonly<P & ExtendableComponentProps<any>>, nextContext: any): void;
                UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P & ExtendableComponentProps<any>>, nextContext: any): void;
                componentWillUpdate?(nextProps: Readonly<P & ExtendableComponentProps<any>>, nextState: Readonly<{}>, nextContext: any): void;
                UNSAFE_componentWillUpdate?(nextProps: Readonly<P & ExtendableComponentProps<any>>, nextState: Readonly<{}>, nextContext: any): void;
        };
        contextType?: React.Context<any> | undefined;
};

